{"id":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","dependencies":[{"name":"C:\\Users\\PC\\Desktop\\maze-runner\\package.json","includedInParent":true,"mtime":1543961491950},{"name":"C:\\Users\\PC\\Desktop\\maze-runner\\.babelrc","includedInParent":true,"mtime":1543958107109},{"name":"C:\\Users\\PC\\Desktop\\maze-runner\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1543948009973}],"generated":{"js":"module.exports = [\n    '#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS',\n    '',\n    'precision mediump float;',\n    '',\n    'struct Light',\n    '{',\n    '    vec2 position;',\n    '    vec3 color;',\n    '    float intensity;',\n    '    float radius;',\n    '};',\n    '',\n    'const int kMaxLights = %LIGHT_COUNT%;',\n    '',\n    'uniform vec4 uCamera; /* x, y, rotation, zoom */',\n    'uniform vec2 uResolution;',\n    'uniform sampler2D uMainSampler;',\n    'uniform sampler2D uNormSampler;',\n    'uniform vec3 uAmbientLightColor;',\n    'uniform Light uLights[kMaxLights];',\n    '',\n    'varying vec2 outTexCoord;',\n    'varying vec4 outTint;',\n    '',\n    'void main()',\n    '{',\n    '    vec3 finalColor = vec3(0.0, 0.0, 0.0);',\n    '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);',\n    '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;',\n    '    vec3 normal = normalize(vec3(normalMap * 2.0 - 1.0));',\n    '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;',\n    '',\n    '    for (int index = 0; index < kMaxLights; ++index)',\n    '    {',\n    '        Light light = uLights[index];',\n    '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.1);',\n    '        vec3 lightNormal = normalize(lightDir);',\n    '        float distToSurf = length(lightDir) * uCamera.w;',\n    '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);',\n    '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;',\n    '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);',\n    '        vec3 diffuse = light.color * diffuseFactor;',\n    '        finalColor += (attenuation * diffuse) * light.intensity;',\n    '    }',\n    '',\n    '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);',\n    '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);',\n    '',\n    '}',\n    ''\n].join('\\n');\n","map":{"mappings":[{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}}],"sources":{"../node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js":"module.exports = [\n    '#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS',\n    '',\n    'precision mediump float;',\n    '',\n    'struct Light',\n    '{',\n    '    vec2 position;',\n    '    vec3 color;',\n    '    float intensity;',\n    '    float radius;',\n    '};',\n    '',\n    'const int kMaxLights = %LIGHT_COUNT%;',\n    '',\n    'uniform vec4 uCamera; /* x, y, rotation, zoom */',\n    'uniform vec2 uResolution;',\n    'uniform sampler2D uMainSampler;',\n    'uniform sampler2D uNormSampler;',\n    'uniform vec3 uAmbientLightColor;',\n    'uniform Light uLights[kMaxLights];',\n    '',\n    'varying vec2 outTexCoord;',\n    'varying vec4 outTint;',\n    '',\n    'void main()',\n    '{',\n    '    vec3 finalColor = vec3(0.0, 0.0, 0.0);',\n    '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);',\n    '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;',\n    '    vec3 normal = normalize(vec3(normalMap * 2.0 - 1.0));',\n    '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;',\n    '',\n    '    for (int index = 0; index < kMaxLights; ++index)',\n    '    {',\n    '        Light light = uLights[index];',\n    '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.1);',\n    '        vec3 lightNormal = normalize(lightDir);',\n    '        float distToSurf = length(lightDir) * uCamera.w;',\n    '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);',\n    '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;',\n    '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);',\n    '        vec3 diffuse = light.color * diffuseFactor;',\n    '        finalColor += (attenuation * diffuse) * light.intensity;',\n    '    }',\n    '',\n    '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);',\n    '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);',\n    '',\n    '}',\n    ''\n].join('\\n');\n"},"lineCount":53}},"hash":"865ea457ce46d13ebaaa8c86bf2ea666","cacheData":{"env":{}}}